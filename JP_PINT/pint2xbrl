
# from jsonschema import validate
import json
import yaml
import sys
import csv
import re
import hashlib
import datetime

shared_file = 'JP_PINT/semantic-model/main.yaml'
jp_pint_file = 'JP_PINT/source/jp_pint.tsv'
xbrl_pint_head = 'JP_PINT/source/head/xBRL-GL-pint-head.txt'

xbrl_base = 'JP_PINT/taxonomy/pint/'
xbrl_pint_xsd = 'xBRL-pint-2022-12-31.xsd'
xbrl_pint_label_en = 'xBRL-pint-2022-12-31-label-en.xml'
xbrl_pint_label_ja = 'xBRL-pint-2022-12-31-label-ja.xml'
xbrl_pint_presentation = 'xBRL-pint-2022-12-31-presentation.xml'

shared_yaml = None

datatypeMap = {
  'Unit Price Amount':'pint:unitPriceAmountItemType',
  'Code':'pint:codeItemType',
  'Date':'pint:dateItemType',
  'Binary object':'pint:binaryObjectItemType',
  'Time':'pint:timeItemType',
  'Identifier':'pint:identifierItemType',
  'Quantity':'pint:quantityItemType',
  'Amount':'pint:amountItemType',
  'Document Reference':'pint:documentReferenceItemType',
  'Text':'pint:textItemType',
  'Percentage':'pint:percentageItemType'
}

def LC3(term):
  if not term:
    return ''
  terms = term.split(' ')
  name = ''
  for i in range(len(terms)):
    if i == 0:
      if 'TAX'==terms[i]:
        name += terms[i].lower()
      else:
        name += terms[i][0].lower() + terms[i][1:]
    else:
      name += terms[i][0].upper() + terms[i][1:]
  return name

def C3(term):
  if not term:
    return ''
  terms = term.split(' ')
  name = '_'.join(terms)
  return name

if __name__ == '__main__':
  try:
    with open(shared_file) as file:
      shared_yaml = yaml.safe_load(file)
      # print(shared_yaml)
  except Exception as e:
    print('Exception occurred while loading YAML...', file=sys.stderr)
    print(e, file=sys.stderr)
    sys.exit(1)

  # ====================================================================
  # 1. jp_pint.tsv -> schema
  # SemSort,PINT_ID,Section,PINT_Card,Aligned,AlignedCard,Level,BT,BT_ja,DT,Desc,Desc_ja,Exp,Exp_ja,Example,SyntSort,element,UBLdatatype,XPath,selectors,CodeList,Occurrence,CardinalityAlignment
  records = []
  with open(jp_pint_file, encoding='utf_8', newline='') as f:
    reader = csv.reader(f, delimiter='\t')
    header = next(reader)
    header[0] = 'SemSort'
    for cols in reader:
      record = {}
      for i in range(len(cols)):
        col = cols[i]
        record[header[i]] = col.strip()
      pint_id = record['ID']
      if not pint_id:
        continue
      term = record['BT']
      if 'ibt'==pint_id[:3].lower():
        name = LC3(term)
      else:
        name = C3(term)
      type = record['DT']
      if type in datatypeMap:
        type = datatypeMap[type]
      else:
        type = ''
      record['name'] = name
      record['type'] = type
      record['pint_id'] = pint_id
      records.append(record)

  records = sorted(records,key=lambda x: x['SemSort'])

  lines = []
  with open(xbrl_pint_head, encoding='utf_8', newline='') as f:
    lines = f.readlines()

  for record in records:
    pint_id = record['pint_id']
    name = record['name']
    type = record['type']
    line = f'  <element name="{name}" id="{pint_id}" type="{type}" substitutionGroup="xbrli:item" nillable="false" xbrli:periodType="instant"/>\n'
    lines.append(line)
  lines.append('</scheme>')

  with open(f'{xbrl_base}{xbrl_pint_xsd}','w',encoding='utf_8', newline='') as f:
    f.writelines(lines)

  parentDict = {}
  parent = ['ibg-00']
  level = 0
  for record in records:
    pint_id = record['pint_id']
    name = record['name']
    if not pint_id in parentDict:
      parentDict[pint_id] = {'name':name, 'level':'', 'parent':''}
    if record['Level'] == level:
      parentDict[pint_id]['parent'] = parent[level-1]
      parent[level] = record['pint_id']
    elif record['Level'] == level+1:
      parentDict[pint_id]['parent'] = parent[level]
      level = record['level']
      if level == len(parent):
        parent.append(None)
      parent[level] = record['pint_id']
    else:
      level = int(record['Level'])
      parentDict[pint_id]['parent'] = parent[level-1]
      if level > len(parent) - 1:
        while level > len(parent) - 1:
          parent.append('')
      parent_id = record['pint_id']
      if 'ibg'==parent_id[:3].lower():
        parent[level] = record['pint_id']
      for i in range(len(parent)):
        if i > level:
          parent[i] = None

  # <!-- cen-11 gl-cen:projectReference -->
  # <link:loc xlink:type="locator" xlink:href="gl-cen-2020-12-31.xsd#gl-cen_projectReference" xlink:label="gl-cen_projectReference_064655acf8b0a234045c61cb4930c4c6"/>
  # <link:labelArc xlink:type="arc" xlink:arcrole="http://www.xbrl.org/2003/arcrole/concept-label" xlink:from="gl-cen_projectReference_064655acf8b0a234045c61cb4930c4c6" xlink:to="lbl_cen-11-en_064655acf8b0a234045c61cb4930c4c6"/>
  # <link:label xlink:type="resource" xlink:label="lbl_cen-11-en_064655acf8b0a234045c61cb4930c4c6" xlink:role="http://www.xbrl.org/2003/role/label" xml:lang="en">Project reference</link:label>
  # <link:label xlink:type="resource" xlink:label="lbl_cen-11-en_064655acf8b0a234045c61cb4930c4c6" xlink:role="http://www.xbrl.org/2003/role/documentation" xml:lang="en">The identification of the project the invoice refers to</link:label>
  # labelLink EN
  lines = ['<?xml version="1.0" encoding="UTF-8"?>',
    '<!-- 2022 (c) XBRL Japan -->',
    '<link:linkbase xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:xlink="http://www.w3.org/1999/xlink" xsi:schemaLocation="http://www.xbrl.org/2003/linkbase http://www.xbrl.org/2003/xbrl-linkbase-2003-12-31.xsd">',
    '  <link:labelLink xlink:type="extended" xlink:role="http://www.xbrl.org/2003/role/link">']
  for record in records:
    pint_id = record['pint_id']
    name = record['name']
    BT = record['BT']
    Desc = record['Desc']
    line = f'  <!-- {pint_id} {name} -->\n'
    lines.append(line)
    dt_now = datetime.datetime.now()
    hash = hashlib.sha1(dt_now.isoformat().encode()).hexdigest()
    line = f'    <link:loc xlink:type="locator" xlink:href="{xbrl_pint_xsd}#_{name}" xlink:label="{name}_{hash}"/>'
    lines.append(line)
    line = f'    <link:labelArc xlink:type="arc" xlink:arcrole="http://www.xbrl.org/2003/arcrole/concept-label" xlink:from="{name}_{hash}" xlink:to="lbl_{pint_id}-en_{hash}"/>'
    lines.append(line)
    line = f'    <link:label xlink:type="resource" xlink:label="lbl_{pint_id}-en_{hash}" xlink:role="http://www.xbrl.org/2003/role/label" xml:lang="en">{BT}</link:label>'
    lines.append(line)
    line = f'    <link:label xlink:type="resource" xlink:label="lbl_{pint_id}-en_{hash}" xlink:role="http://www.xbrl.org/2003/role/documentation" xml:lang="en">{Desc}</link:label>'
    lines.append(line)
  lines.append('  </link:labelLink>')
  lines.append('</link:linkbase>')
  
  with open(f'{xbrl_base}{xbrl_pint_label_en}','w',encoding='utf_8', newline='') as f:
    f.writelines(lines)

  # labelLink JA
  lines = ['<?xml version="1.0" encoding="UTF-8"?>',
    '<!-- 2022 (c) XBRL Japan -->',
    '<link:linkbase xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:xlink="http://www.w3.org/1999/xlink" xsi:schemaLocation="http://www.xbrl.org/2003/linkbase http://www.xbrl.org/2003/xbrl-linkbase-2003-12-31.xsd">',
    '  <link:labelLink xlink:type="extended" xlink:role="http://www.xbrl.org/2003/role/link">']
  for record in records:
    pint_id = record['pint_id']
    name = record['name']
    BT = record['BT_ja']
    Desc = record['Desc_ja']
    line = f'  <!-- {pint_id} {name} -->\n'
    lines.append(line)
    dt_now = datetime.datetime.now()
    hash = hashlib.sha1(dt_now.isoformat().encode()).hexdigest()
    line = f'    <link:loc xlink:type="locator" xlink:href="{xbrl_pint_xsd}#_{name}" xlink:label="{name}_{hash}"/>'
    lines.append(line)
    line = f'    <link:labelArc xlink:type="arc" xlink:arcrole="http://www.xbrl.org/2003/arcrole/concept-label" xlink:from="{name}_{hash}" xlink:to="lbl_{pint_id}-ja_{hash}"/>'
    lines.append(line)
    line = f'    <link:label xlink:type="resource" xlink:label="lbl_{pint_id}-ja_{hash}" xlink:role="http://www.xbrl.org/2003/role/label" xml:lang="en">{BT}</link:label>'
    lines.append(line)
    line = f'    <link:label xlink:type="resource" xlink:label="lbl_{pint_id}-ja_{hash}" xlink:role="http://www.xbrl.org/2003/role/documentation" xml:lang="en">{Desc}</link:label>'
    lines.append(line)
  lines.append('  </link:labelLink>')
  lines.append('</link:linkbase>')
  with open(f'{xbrl_base}{xbrl_pint_label_ja}','w',encoding='utf_8', newline='') as f:
    f.writelines(lines)

  #  presentationLink
  lines = ['<?xml version="1.0" encoding="UTF-8"?>',
    '<!-- 2022 (c) XBRL Japan -->',
    '<linkbase xmlns="http://www.xbrl.org/2003/linkbase" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.xbrl.org/2003/linkbase http://www.xbrl.org/2003/xbrl-linkbase-2003-12-31.xsd">',
    '<presentationLink xlink:type="extended" xlink:role="http://www.xbrl.org/2003/role/link">']
  for record in records:
    pint_id = record['pint_id']
    name = record['name']
    if 'hash' in parentDict[pint_id]:
      hash = parentDict[pint_id]['hash']
    else:
      dt_now = datetime.datetime.now()
      hash = hashlib.sha1(dt_now.isoformat().encode()).hexdigest()
      line = f'    <loc xlink:type="locator" xlink:href="{xbrl_pint_xsd}#_{name}" xlink:label="{name}_{hash}" xlink:title="presentation parent: {name}"/>\n'
      lines.append(line)
    parent = parentDict[pint_id]['parent']
    parent_name = parentDict[parent_id]['name']
    if not 'hash' in parentDict[parent_id]:
      dt_now = datetime.datetime.now()
      parent_hash = hashlib.sha1(dt_now.isoformat().encode()).hexdigest()
      line = f'    <loc xlink:type="locator" xlink:href="{xbrl_pint_xsd}#_{parent_name}" xlink:label="{parent_name}_{parent_hash}" xlink:title="presentation parent: {parent_name}"/>\n'
      lines.append(line)
    else:
      parent_hash = parentDict[parent_id]['hash']
    line = f'    <presentationArc xlink:type="arc" xlink:arcrole="http://www.xbrl.org/2003/arcrole/parent-child" xlink:from="{parent_name}_{parent_hash}" xlink:to="{name}_{hash}" priority="1" xlink:title="presentation: {parent_name} to {name}" use="optional"/>\n'
    lines.append(line)
  lines.append('  </presentationLink>')
  lines.append('</linkbase>')
  with open(f'{xbrl_base}{xbrl_pint_presentation}','w',encoding='utf_8', newline='') as f:
    f.writelines(lines)


#     printf "    <!-- %s -->\n", term;
#     # print seq " 1." code " 2." p_module " 3." parent " 4." plt_module " 5." plt_parent " 6." mode;
#     if (1!=loc_defined[parent] && ("a"==mode || "u"==mode)) {
#       loc_defined[parent]=1;
#       printf "    <loc xlink:type=\"locator\" xlink:href=\"../../%s/gl-%s-2022-12-31.xsd#gl-%s_%s\" xlink:label=\"gl-%s_%s\" xlink:title=\"presentation parent: %s\"/>\n", p_module, p_module, p_module, p_term, p_module, p_term, p_term;
#     }
#     if (1!=loc_defined[plt_parent] && "u"==mode) {
#       loc_defined[plt_parent]=1;
#       printf "    <loc xlink:type=\"locator\" xlink:href=\"../../%s/gl-%s-2022-12-31.xsd#gl-%s_%s\" xlink:label=\"gl-%s_%s\" xlink:title=\"presentation parent: %s\"/>\n", plt_module, plt_module, plt_module, plt_term, plt_module, plt_term, plt_term;
#     }
#     if (1!=loc_defined[code] && ("a"==mode || "u"==mode)) {
#       loc_defined[code]=1;
#       printf "    <loc xlink:type=\"locator\" xlink:href=\"../../%s/gl-%s-2022-12-31.xsd#gl-%s_%s\" xlink:label=\"gl-%s_%s\" xlink:title=\"presentation child: %s\"/>\n", module, module, module, term, module, term, term;
#     }
#     if ("u"==mode) {
#       printf "    <presentationArc xlink:type=\"arc\" xlink:arcrole=\"http://www.xbrl.org/2003/arcrole/parent-child\" xlink:from=\"gl-%s_%s\" xlink:to=\"gl-%s_%s\" priority=\"1\" xlink:title=\"presentation: %s to %s\" use=\"prohibited\"/>\n", plt_module, plt_term, module, term, plt_term, term;
#       printf "    <presentationArc xlink:type=\"arc\" xlink:arcrole=\"http://www.xbrl.org/2003/arcrole/parent-child\" xlink:from=\"gl-%s_%s\" xlink:to=\"gl-%s_%s\" priority=\"2\" xlink:title=\"presentation: %s to %s\" use=\"optional\" order=\"%s\"/>\n", p_module, p_term, module, term, p_term, term, seq;
#     } else if ("a"==mode) {
#       printf "    <presentationArc xlink:type=\"arc\" xlink:arcrole=\"http://www.xbrl.org/2003/arcrole/parent-child\" xlink:from=\"gl-%s_%s\" xlink:to=\"gl-%s_%s\" priority=\"2\" xlink:title=\"presentation: %s to %s\" use=\"optional\" order=\"%s\"/>\n", p_module, p_term, module, term, p_term, term, seq;
#     }

  print('end')